// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using InstantHelper;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Threading.Tasks;
using TenantAPI.Models;
using TenantAPI.Services;

namespace TenantAPI.Controllers {
    
    
    // TODO: Uncomment the following line to use an API Key; change the value of the key in appSetting (X-API-Key)
    // [ApiKey()]
    [Route("Address")]
    public class AddressController : ControllerBase {
        
        private IAddressBuilder _builder;
        
        public AddressController(IAddressBuilder builder) {
            _builder = builder;
        }
        
        [HttpGet("")]
        public async Task<ActionResult> GetAddresses() {

            return Ok(await _builder.GetAddresses());
        }
        
        [HttpGet("Display")]
        public async Task<ActionResult> GetDisplayModels() {
            //List all model properties that should be displayed
            //Here only a couple have been added as an example
            var propNames = new List<string>();
            propNames.Add(nameof(AddressModel.Id));
            propNames.Add(nameof(AddressModel.UserId));

            return Ok(await Task.FromResult(_builder.GetDisplayModels(propNames)));
        }
        
        [HttpGet("Paged")]
        public async Task<ActionResult> Paged(int pageIndex, int pageSize) {

            var models = await _builder.GetAddresses();

            return Ok(models.ToPagedList(pageIndex, pageSize, 0, models.Count()));
        }
        
        [HttpGet("{id}")]
        public async Task<ActionResult> GetAddress_ById(System.Guid id) {

             var response = await _builder.GetAddress_ById(id);
            if (response.ValidationMessage != null) {
                return BadRequest(response.ValidationMessage);
            }

            return Ok(response.Model);
        }
        
        [HttpGet("GetAddress_ByAddressTypeId/{addressTypeId}")]
        public async Task<IQueryable<AddressModel>> GetAddress_ByAddressTypeId(int addressTypeId) {

            return await _builder.GetAddress_ByAddressTypeId(addressTypeId);
        }
        
        [HttpGet("GetAddress_ByStateId/{stateId}")]
        public async Task<IQueryable<AddressModel>> GetAddress_ByStateId(int stateId) {

            return await _builder.GetAddress_ByStateId(stateId);
        }
        
        [HttpPost("")]
        [ModelStateValidation()]
        public async Task<ActionResult> AddAddress([FromBody]AddressModel model) {

            var response = await _builder.AddAddress(model);

            if (response.ValidationMessage != null) {
                return BadRequest(response.ValidationMessage);
            }

            return CreatedAtAction("GetAddress_ById", new {id = ((AddressModel)response.Model).Id}, response.Model);
        }
        
        [HttpPut("")]
        [ModelStateValidation()]
        public async Task<ActionResult> UpdateAddress([FromBody]AddressModel model) {
            var response = await _builder.UpdateAddress(model);

            if (response.ValidationMessage != null) {
                return BadRequest(response.ValidationMessage);
            }

            return AcceptedAtAction("GetAddress_ById", new {id = model.Id}, model);
        }
        
        [HttpDelete("{id}")]
        public async Task<ActionResult> DeleteAddress(System.Guid id) {

            var response = await _builder.DeleteAddress(id);

            if (response.ValidationMessage != null) {
                return BadRequest(response.ValidationMessage);
            }

            return StatusCode(response.StatusCode);
        }
    }
}

