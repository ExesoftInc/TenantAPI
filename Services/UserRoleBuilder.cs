// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;
using TenantAPI.Entities;
using TenantAPI.Models;
using TenantAPI.Services;

namespace TenantAPI.Services {
    
    
    public class UserRoleBuilder : IUserRoleBuilder {
        
        private IDbEntities _entities;
        
        private ILoggerManager _logger;
        
        public UserRoleBuilder(EntitiesContext context, ILoggerManager logger) {
            _entities = context;
            _logger = logger;
        }
        
        private Expression<Func<UserRole, UserRoleModel>>  ProjectToModel {
            get {
                return entity => new UserRoleModel(entity);
            }
        }
        
        public async Task<IQueryable<UserRoleModel>> GetUserRoles() {
            return await Task.FromResult(_entities.UserRoles.Select(ProjectToModel));
        }
        
        public IList<ExpandoObject> GetDisplayModels(List<string> propNames) {
            var models = _entities.UserRoles.Select(ProjectToModel);

            var displayModels = new List<ExpandoObject>();
            foreach (var model in models)
            {
                dynamic displayModel = DynamicHelper.ConvertToExpando(model, propNames);
                displayModels.Add(displayModel);
            }

            return displayModels;
        }
        
        public async Task<BuilderResponse> GetUserRole_ByRoleIdUserId(int roleId, string userId) {
            var query = Search(_entities.UserRoles, x => x.RoleId == roleId&& x.UserId == userId).Select(ProjectToModel);
            if (query.Any()) {
                return await Task.FromResult(new BuilderResponse{ Model = query.Single() }); 
            }
            else {
                return await Task.FromResult(new BuilderResponse { ValidationMessage = $"Record Not Found; UserRole with roleId, userId = '{roleId}', '{userId}' doesn't exist." }); 
            }
        }
        
        public async Task<IQueryable<UserRoleModel>> GetUserRole_ByRoleId(int roleId) {

            var query = await Task.FromResult(Search(_entities.UserRoles, x => x.RoleId == roleId).Select(ProjectToModel));

            return query;
        }
        
        public async Task<IQueryable<UserRoleModel>> GetUserRole_ByUserId(string userId) {

            var query = await Task.FromResult(Search(_entities.UserRoles, x => x.UserId == userId).Select(ProjectToModel));

            return query;
        }
        
        public async Task<BuilderResponse> AddUserRole(UserRoleModel model) {

            var matchRoleId = _entities.Roles.Where(x => x.Id.Equals(model.RoleId));
            if (!matchRoleId.Any()) {
                return new BuilderResponse { ValidationMessage = $"Foreign Key Violation; " + nameof(model.RoleId) + " '{model.RoleId}' doesn't exist in the system."}; 
            }

            var matchUserId = _entities.Users.Where(x => x.Id.Equals(model.UserId));
            if (!matchUserId.Any()) {
                return new BuilderResponse { ValidationMessage = $"Foreign Key Violation; " + nameof(model.UserId) + " '{model.UserId}' doesn't exist in the system."}; 
            }


            var entity = ModelExtender.ToEntity(model);
            _entities.UserRoles.Add(entity);
            await _entities.SaveChangesAsync();
            _logger.LogInfo(string.Format("UserRole added with values: '{0}'", JsonConvert.SerializeObject(model)));

            return new BuilderResponse{ Model = new UserRoleModel(entity) }; 
        }
        
        public async Task<BuilderResponse> UpdateUserRole(UserRoleModel model) {

            var query = Search(_entities.UserRoles, x =>  x.RoleId == model.RoleId && x.UserId == model.UserId);
            if (!query.Any()) {
            return new BuilderResponse { ValidationMessage = "Record Not Found; " + string.Format("UserRole with _roleId, _userId = '{0}', '{1}' doesn't exist.",model.RoleId, model.UserId)}; 
            }

            var matchRoleId = _entities.Roles.Where(x => x.Id.Equals(model.RoleId));
            if (!matchRoleId.Any()) {
            return new BuilderResponse { ValidationMessage = "Foreign Key Violation; " + nameof(model.RoleId) + string.Format("RoleId = '{0}' doesn't exist in the system.", model.RoleId)}; 
            }

            var matchUserId = _entities.Users.Where(x => x.Id.Equals(model.UserId));
            if (!matchUserId.Any()) {
            return new BuilderResponse { ValidationMessage = "Foreign Key Violation; " + nameof(model.UserId) + string.Format("UserId = '{0}' doesn't exist in the system.", model.UserId)}; 
            }

            UserRole entity = query.SingleOrDefault();

            entity = model.ToEntity(entity);
            await _entities.SaveChangesAsync();
            _logger.LogInfo(string.Format("UserRole update with values: '{0}'", JsonConvert.SerializeObject(model)));

            return new BuilderResponse{ StatusCode = (int)HttpStatusCode.Accepted }; 
        }
        
        public async Task<BuilderResponse> DeleteUserRole(int roleId, string userId) {

            var query = Search(_entities.UserRoles, x => x.RoleId == roleId&& x.UserId == userId);
            if (!query.Any()) {
                return new BuilderResponse { ValidationMessage = "Record Not Found; " + string.Format("UserRole with _roleId, _userId = '{0}', '{1}' doesn't exist.",roleId, userId)}; 
            }

            var entity = query.SingleOrDefault();

            _entities.UserRoles.Remove(entity);
            await _entities.SaveChangesAsync();
            _logger.LogInfo(string.Format("UserRole deleted with values: '{0}'", JsonConvert.SerializeObject(new UserRoleModel(entity))));

            return new BuilderResponse{ StatusCode = (int)HttpStatusCode.NoContent }; 
        }
        
        private IQueryable<UserRole> Search(IQueryable<UserRole> query, Expression<Func<UserRole, bool>> filter) {
            return query.Where(filter);
        }
    }
}

