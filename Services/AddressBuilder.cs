// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;
using TenantAPI.Entities;
using TenantAPI.Models;
using TenantAPI.Services;

namespace TenantAPI.Services {
    
    
    public class AddressBuilder : IAddressBuilder {
        
        private IDbEntities _entities;
        
        private ILoggerManager _logger;
        
        public AddressBuilder(EntitiesContext context, ILoggerManager logger) {
            _entities = context;
            _logger = logger;
        }
        
        private Expression<Func<Address, AddressModel>>  ProjectToModel {
            get {
                return entity => new AddressModel(entity);
            }
        }
        
        public async Task<IQueryable<AddressModel>> GetAddresses() {
            return await Task.FromResult(_entities.Addresses.Select(ProjectToModel));
        }
        
        public IList<ExpandoObject> GetDisplayModels(List<string> propNames) {
            var models = _entities.Addresses.Select(ProjectToModel);

            var displayModels = new List<ExpandoObject>();
            foreach (var model in models)
            {
                dynamic displayModel = DynamicHelper.ConvertToExpando(model, propNames);
                displayModels.Add(displayModel);
            }

            return displayModels;
        }
        
        public async Task<BuilderResponse> GetAddress_ById(System.Guid id) {
            var query = Search(_entities.Addresses, x => x.Id == id).Select(ProjectToModel);
            if (query.Any()) {
                return await Task.FromResult(new BuilderResponse{ Model = query.Single() }); 
            }
            else {
                return await Task.FromResult(new BuilderResponse { ValidationMessage = $"Record Not Found; Address with id = '{id}' doesn't exist." }); 
            }
        }
        
        public async Task<IQueryable<AddressModel>> GetAddress_ByAddressTypeId(int addressTypeId) {

            var query = await Task.FromResult(Search(_entities.Addresses, x => x.AddressTypeId == addressTypeId).Select(ProjectToModel));

            return query;
        }
        
        public async Task<IQueryable<AddressModel>> GetAddress_ByStateId(int stateId) {

            var query = await Task.FromResult(Search(_entities.Addresses, x => x.StateId == stateId).Select(ProjectToModel));

            return query;
        }
        
        public async Task<BuilderResponse> AddAddress(AddressModel model) {

            var matchAddressTypeId = _entities.AddressTypes.Where(x => x.Id.Equals(model.AddressTypeId));
            if (!matchAddressTypeId.Any()) {
                return new BuilderResponse { ValidationMessage = $"Foreign Key Violation; " + nameof(model.AddressTypeId) + " '{model.AddressTypeId}' doesn't exist in the system."}; 
            }

            var matchStateId = _entities.States.Where(x => x.Id.Equals(model.StateId));
            if (!matchStateId.Any()) {
                return new BuilderResponse { ValidationMessage = $"Foreign Key Violation; " + nameof(model.StateId) + " '{model.StateId}' doesn't exist in the system."}; 
            }


            var entity = ModelExtender.ToEntity(model);
            _entities.Addresses.Add(entity);
            await _entities.SaveChangesAsync();
            _logger.LogInfo(string.Format("Address added with values: '{0}'", JsonConvert.SerializeObject(model)));

            return new BuilderResponse{ Model = new AddressModel(entity) }; 
        }
        
        public async Task<BuilderResponse> UpdateAddress(AddressModel model) {

            var query = Search(_entities.Addresses, x =>  x.Id == model.Id);
            if (!query.Any()) {
            return new BuilderResponse { ValidationMessage = "Record Not Found; " + string.Format("Address with _id = '{0}' doesn't exist.",model.Id)}; 
            }

            var matchAddressTypeId = _entities.AddressTypes.Where(x => x.Id.Equals(model.AddressTypeId));
            if (!matchAddressTypeId.Any()) {
            return new BuilderResponse { ValidationMessage = "Foreign Key Violation; " + nameof(model.AddressTypeId) + string.Format("AddressTypeId = '{0}' doesn't exist in the system.", model.AddressTypeId)}; 
            }

            var matchStateId = _entities.States.Where(x => x.Id.Equals(model.StateId));
            if (!matchStateId.Any()) {
            return new BuilderResponse { ValidationMessage = "Foreign Key Violation; " + nameof(model.StateId) + string.Format("StateId = '{0}' doesn't exist in the system.", model.StateId)}; 
            }

            Address entity = query.SingleOrDefault();

            entity = model.ToEntity(entity);
            await _entities.SaveChangesAsync();
            _logger.LogInfo(string.Format("Address update with values: '{0}'", JsonConvert.SerializeObject(model)));

            return new BuilderResponse{ StatusCode = (int)HttpStatusCode.Accepted }; 
        }
        
        public async Task<BuilderResponse> DeleteAddress(System.Guid id) {

            var query = Search(_entities.Addresses, x => x.Id == id);
            if (!query.Any()) {
                return new BuilderResponse { ValidationMessage = "Record Not Found; " + string.Format("Address with _id = '{0}' doesn't exist.",id)}; 
            }

            var entity = query.SingleOrDefault();

            _entities.Addresses.Remove(entity);
            await _entities.SaveChangesAsync();
            _logger.LogInfo(string.Format("Address deleted with values: '{0}'", JsonConvert.SerializeObject(new AddressModel(entity))));

            return new BuilderResponse{ StatusCode = (int)HttpStatusCode.NoContent }; 
        }
        
        private IQueryable<Address> Search(IQueryable<Address> query, Expression<Func<Address, bool>> filter) {
            return query.Where(filter);
        }
    }
}

