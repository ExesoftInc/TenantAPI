// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;
using TenantAPI.Entities;
using TenantAPI.Models;
using TenantAPI.Services;

namespace TenantAPI.Services {
    
    
    public class StateBuilder : IStateBuilder {
        
        private IDbEntities _entities;
        
        private ILoggerManager _logger;
        
        public StateBuilder(EntitiesContext context, ILoggerManager logger) {
            _entities = context;
            _logger = logger;
        }
        
        private Expression<Func<State, StateModel>>  ProjectToModel {
            get {
                return entity => new StateModel(entity);
            }
        }
        
        public async Task<IQueryable<StateModel>> GetStates() {
            return await Task.FromResult(_entities.States.Select(ProjectToModel));
        }
        
        public IList<ExpandoObject> GetDisplayModels(List<string> propNames) {
            var models = _entities.States.Select(ProjectToModel);

            var displayModels = new List<ExpandoObject>();
            foreach (var model in models)
            {
                dynamic displayModel = DynamicHelper.ConvertToExpando(model, propNames);
                displayModels.Add(displayModel);
            }

            return displayModels;
        }
        
        public async Task<BuilderResponse> GetState_ById(int id) {
            var query = Search(_entities.States, x => x.Id == id).Select(ProjectToModel);
            if (query.Any()) {
                return await Task.FromResult(new BuilderResponse{ Model = query.Single() }); 
            }
            else {
                return await Task.FromResult(new BuilderResponse { ValidationMessage = $"Record Not Found; State with id = '{id}' doesn't exist." }); 
            }
        }
        
        public async Task<BuilderResponse> AddState(StateModel model) {


            var entity = ModelExtender.ToEntity(model);
            _entities.States.Add(entity);
            await _entities.SaveChangesAsync();
            _logger.LogInfo(string.Format("State added with values: '{0}'", JsonConvert.SerializeObject(model)));

            return new BuilderResponse{ Model = new StateModel(entity) }; 
        }
        
        public async Task<BuilderResponse> UpdateState(StateModel model) {

            var query = Search(_entities.States, x =>  x.Id == model.Id);
            if (!query.Any()) {
                return new BuilderResponse { ValidationMessage = "Record Not Found; " + string.Format("State with _id = '{0}' doesn't exist.",model.Id)}; 
            }

            State entity = query.SingleOrDefault();
            entity = model.ToEntity(entity);
            await _entities.SaveChangesAsync();
            _logger.LogInfo(string.Format("State update with values: '{0}'", JsonConvert.SerializeObject(model)));

            return new BuilderResponse{ StatusCode = (int)HttpStatusCode.Accepted }; 
        }
        
        public async Task<BuilderResponse> DeleteState(int id) {

            var query = Search(_entities.States, x => x.Id == id);
            if (!query.Any()) {
                return new BuilderResponse { ValidationMessage = "Record Not Found; " + string.Format("State with _id = '{0}' doesn't exist.",id)}; 
            }

            var entity = query.SingleOrDefault();

            _entities.States.Remove(entity);
            await _entities.SaveChangesAsync();
            _logger.LogInfo(string.Format("State deleted with values: '{0}'", JsonConvert.SerializeObject(new StateModel(entity))));

            return new BuilderResponse{ StatusCode = (int)HttpStatusCode.NoContent }; 
        }
        
        private IQueryable<State> Search(IQueryable<State> query, Expression<Func<State, bool>> filter) {
            return query.Where(filter);
        }
    }
}

